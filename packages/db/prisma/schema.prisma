// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Owner {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pets        Pet[]
  bookings    Booking[]
  userId      String    @unique
  messages    Message[] @relation("ownerMessages")
  name        String
  imageUrl    String
  description String?
  reviews     Review[]
  location    String    @default("London, UK")
  reports     Report[]
}

model Sitter {
  id          String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
  services        Service[]
  userId          String    @unique
  messages        Message[] @relation("sitterMessages")
  name            String
  imageUrl        String
  images          Image[]
  bio             String    @default("Hello! I'm a new sitter.")
  description     String    @default("I dont have a description yet.")
  proximityRadius Int       @default(10)
  reviews         Review[]
  location        String    @default("London, UK")
  reports         Report[]
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  sitterId  String
  sitter    Sitter   @relation(fields: [sitterId], references: [id])

  @@index([sitterId])
}

model AvailableTime {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  time      TimeOfDay
  day       Day
  serviceId Int
  service   Service   @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
}

model ScheduledTime {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  time      TimeOfDay
  day       Day
  booking   Booking?
  frequency BookingFrequency?
  bookingId Int?              @unique
}

model Booking {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          BookingStatus @default(PENDING)
  owner           Owner         @relation(fields: [ownerId], references: [id])
  ownerId         String
  sitter          Sitter        @relation(fields: [sitterId], references: [id])
  sitterId        String
  service         Service       @relation(fields: [serviceId], references: [id])
  serviceId       Int
  pet             Pet           @relation(fields: [petId], references: [id])
  petId           Int
  scheduledTime   ScheduledTime @relation(fields: [scheduledTimeId], references: [id])
  scheduledTimeId Int           @unique

  @@index([ownerId])
  @@index([sitterId])
  @@index([serviceId])
  @@index([petId])
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String
  city      String
  state     String
  zip       String
  lat       Float
  lng       Float
}

model Pet {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       Owner     @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
  description String?
  type        PetType
  @@index([ownerId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  owner     Owner    @relation("ownerMessages", fields: [ownerId], references: [id])
  ownerId   String
  sitter    Sitter   @relation("sitterMessages", fields: [sitterId], references: [id])
  sitterId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
  @@index([sitterId])
}

enum Role {
  OWNER
  SITTER
}

enum PetType {
  DOG
  CAT
  BIRD
  FISH
  OTHER
}

model Service {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  type           ServiceType
  price          Float
  description    String
  duration       Int // in minutes
  petType        PetType
  Sitter         Sitter          @relation(fields: [sitterId], references: [id])
  sitterId       String
  availableTimes AvailableTime[]
  bookings       Booking[]

  @@index([sitterId])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  content   String
  fromId    String
  from      Owner    @relation(fields: [fromId], references: [id])
  toId      String
  to        Sitter   @relation(fields: [toId], references: [id])

  @@index([fromId])
  @@index([toId])
}

model Report {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  reportType ReportType
  content    String
  fromId     String
  from       Owner      @relation(fields: [fromId], references: [id])
  toId       String
  to         Sitter     @relation(fields: [toId], references: [id])

  @@index([fromId])
  @@index([toId])
}

enum ReportType {
  HARRASMENT
  VIOLENCE
  THREATENING_BEHAVIOUR
  SPAM
  HATE
  OTHER
}

enum ServiceType {
  WALK
  PET_CARE
  HOUSE_SITTING
}

enum BookingFrequency {
  ONE_OFF
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Day {
  MONDAY
  TEUSDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimeOfDay {
  ANY
  MORNING
  AFTERNOON
  EVENING
}





