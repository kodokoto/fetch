// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  owner     Owner    @relation("ownerMessages", fields: [ownerId], references: [id])
  ownerId   Int
  sitter    Sitter   @relation("sitterMessages", fields: [sitterId], references: [id])
  sitterId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
  @@index([sitterId])
}

model Owner {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pets        Pet[]
  bookings    Booking[]
  userId      String    @unique
  messages    Message[] @relation("ownerMessages")
  name        String
  imageUrl    String
  description String?
}

model Sitter {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
  services        Service[]
  userId          String    @unique
  messages        Message[] @relation("sitterMessages")
  name            String
  imageUrl        String
  description     String?
  proximityRadius Int       @default(10)
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String
  city      String
  state     String
  zip       String
  lat       Float
  lng       Float
  userId    Int      @unique
}

model AvailableTime {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  time      TimeOfDay
  day       Day
  serviceId Int
  service   Service   @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
}

model Pet {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     Int
  owner       Owner     @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
  description String?

  @@index([ownerId])
}

enum Role {
  OWNER
  SITTER
}

enum PetType {
  DOG
  CAT
  BIRD
  FISH
  OTHER
}

model Service {
  id             Int             @id @default(autoincrement())
  type           ServiceType
  price          Float
  description    String
  duration       Int // in minutes
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  petType        PetType
  bookings       Booking[]
  Sitter         Sitter          @relation(fields: [sitterId], references: [id])
  sitterId       Int
  availableTimes AvailableTime[]

  @@index([sitterId])
}

enum ServiceType {
  WALK
  PET_CARE
  HOUSE_SITTING
}

model Booking {
  id        Int               @id @default(autoincrement())
  status    BookingStatus     @default(PENDING)
  startDate DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  owner     Owner             @relation(fields: [ownerId], references: [id])
  ownerId   Int
  sitter    Sitter            @relation(fields: [sitterId], references: [id])
  sitterId  Int
  serviceId Int
  services  Service           @relation(fields: [serviceId], references: [id])
  pets      Pet[]
  frequency BookingFrequency?

  @@index([ownerId])
  @@index([sitterId])
  @@index([serviceId])
}

enum BookingFrequency {
  ONE_OFF
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Day {
  MONDAY
  TEUSDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimeOfDay {
  ANY
  MORNING
  AFTERNOON
  EVENING
}
